#!/usr/bin/env bash
# update_wekan (see https://github.com/BabyFnord/update_wekan/)
# This script performs various update procedures to wekan installations hosted on Uberspace 7 webspaces.
# See https://wekan.github.io/ for wekan, an Open-Source kanban board.
# v6.0.4 27.11.2023 by BabyFnord, based on the prior work of Kim Diallo at uberspace.de

# Uncomment below for shell debugging
# set -x

# Error and var handling (see details at https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html)
set -eauo pipefail

# Declare array with all variables used on runtime, to ease pre-exit cleanup.
declare -a _VARS_=(

     "_build_dir_"
     "_dir_"
     "_former_version_"
     "_install_dir_"
     "_node_current_"
     "_node_version_"
     "_node_wekan_"
     "_pid_"
     "_revert_version_"
     "_url_"
     "_usage_"
    )

# Declare all vars
for var in ${_VARS_[@]}; do         # SC2068 - no quotes expand into multiple other arguments
    declare "${var}"
done

# Store usage message in a var
_usage_="

    update_wekan        Keeping wekan on Uberspace 7 up-to-date, the easy way!
    (v6)                See https://wekan.github.io/ for WeKan, an open source Kanban board, or
                        https://github.com/BabyFnord/update_wekan/ for updates to this script.

    Usage:              update_wekan [options]

    Options:

        --debug             Print debugging information to stdout.

        --reinstall         [broken] Remove the current WeKan if present, and perform a fresh install.

        --help              Print this help text.


"


# Print usage
function usage () {

    # Use of this script only makes sense in a loginshell
    if [ -t ]; then
        printf '\n%s\n' "${_usage_}"
    fi
    }


# Function to grant clean exits all time
function error_exit () {

    # Remove created folders
    rm -rf "${_build_dir_}"
    rm -rf "${_dir_}"

    # Unset used vars
    unset ${_VARS_[@]}           # SC2068 - no quotes expand into multiple other arguments

    # Unset vars array
    unset _VARS_

    # Definitely return error to trigger bash's builtin 'set -e'
    return 1
}


# This function reverts wekan to a prior version
function revert () {

    local _revert_version_="${1}"

    # Check if a given version is present.
    if [ -d "$HOME/wekan/wekan-${_revert_version_}" ]; then

        # Store install dir from destination version to _dir_ var.
        local _dir_="$HOME/wekan/wekan-${_revert_version_}"

        # Store node version to run destination wekan to var.
        local _node_version_="$(cat "${_dir_}"/NODE_VERSION)"

        # Set the needed node version.
        # uberspace tools version use node "${_node_version_}"

        # Point the 'current' symlink to given version.
        ln -sfn "${_dir_}/bundle" "$HOME"/wekan/current


    # Check if wekan service is running.
    # if restart_wekan; then
            tput smso; echo -e "\n We're done--WeKan ${_revert_version_} is operational, exiting now.\n\n"; tput rmso
    #     else
    #         tput bel; tput smso; tput setaf 1; echo -e "\n Oops, something went wrong--WeKan service isn't running.\n\n"; tput rmso; tput sgr0
    #         return 1
    #     fi
    else
        tput bel; tput smso; tput setaf 1; echo -e "\n Install directory to selected WeKan version present in $HOME/wekan.\n\n"; tput rmso; tput sgr0
        return 1
    fi

    return 0
    }


# This function monitors the proper supervisorctl sequence (stopping > updating > starting).
# function restart_wekan () {

    # # Prior check, whether wekan is running at all.
    # if $(supervisorctl status wekan |grep -q 'RUNNING'); then
        #
    #     # If it is, store the PID in local var.
    #     local _pid_="$(supervisorctl pid wekan)"
        #
    #     # Now stop wekan.
    #     supervisorctl stop wekan
        #
    #     # Wait until we're done.
    #     while kill -0 "${_pid_}" 2> /dev/null; do
    #         :
    #     done
        #
    # fi
        #
    # # Update and start the wekan service.
    # supervisorctl update wekan
        #
    # # Wait again, until we're done, avoiding any collisions.
    # sleep 1
        #
    # # Let's start once more.
    # supervisorctl start wekan
        #
    # # Set its new PID to a variable.
    #     local _pid_="$(supervisorctl pid wekan)"
        #
    # # Wait once more, just to be safe.
    # sleep 10
        #
    # # Checking whether wekan service is up & running with the same PID. Return 0 if it is, or 1 if not.
    # if $(supervisorctl status wekan |grep -q 'RUNNING'); then
        #
    #     if [[ "${_pid_}" == "$(supervisorctl pid wekan)" ]]; then
    #         return 0
    #     else
    #         return 1
    #     fi
    # else
    #     return 1
    # fi

    # }


# If a wekan session is running, ask user to terminate wekan gracefully or to exit the script.
    if tmux ls |grep -q 'wekan'; then
        tput smso; echo -e "\n A tmux session for WeKan is still running.\n\n"; tput rmso
        while true; do
            read -p "We need to terminate WeKan before upgrading. Proceed? (y/n) " yn
            case $yn in
                [Yy]* ) tmux send-keys -t wekan C-c; tmux kill-session -t wekan; break;;
                [Nn]* ) exit;;
                * ) echo "Please answer yes or no.";;
            esac
        done
    fi



# Checking whether script was called with '--debug'. If it was, enable verbose stdout and trim the debug arg from $@.
if [[ "${@}" = *"--debug"* ]]; then
    set -x
    set -- "${@%'--debug'}"
fi



    # # Checking whether script was called with '--revert'. If it was, only revert to a given version and exit.
    # if [[ "${@}" == "--revert" ]]; then
        #
    #     if [[ "${#}" -lt 2 ]]; then
    #         tput bel; tput smso; tput setaf 1; echo -e "\n Unable to revert, please try: \n\t update_wekan --revert [old version] \n\n"; tput rmso; tput sgr0
    #         exit 1
    #     fi
        #
    #     if revert "${2}"; then
    #         exit 0
    #     else
    #         exit 1
    #     fi
    # fi
# fi

# Stores our current wekan version in a variable.
# _version_="wekan-6.89.zip" # only used if auto-download fails for some reason
version=$(curl -sI https://github.com/wekan/wekan/releases/latest | awk -F '/' '/^location/ {print substr($NF, 1, length($NF)-1)}')
version="${version#v}"
_version_="wekan-$version.zip"
echo "Version: $version"

# Determines the download URL by means of this variable.
_url_="https://releases.wekan.team/${_version_}"
echo "Download URL is: $_url_"

# Store path to version into variable.
# First create the directory ~/wekan, subsequently a directory
# for said version, and finally the previous path, so we can
# point a symlink to the new version after building it.
_dir_="$HOME/wekan/${_version_/.zip/}"


# If a directory, which has been stored in the variable, already exists,
# we can refrain from building wekan and exit the script.
if [[ -d "${_dir_}" ]]; then
    if [[ "${@}" = *"--reinstall"* ]]; then
        rm -rf "${_dir_}"/*
    else
        tput smso; echo -e "\n Nothing to do, wekan is already up to date, exiting now.\n\n"; tput rmso
        exit 0
    fi
fi


# Create a download tempdir and store its path into a variable, avoiding
# potential conflicts, and ease our post-build cleanup.
_build_dir_="$(mktemp --directory --tmpdir wekan.XXX)"


# Download and unzip the latest wekan build into our tempdir.
# In order to retain the current user session directory, we're going
# to execute that part in a subshell ( ).
(
    cd "${_build_dir_}"
    wget "${_url_}"
    unzip -q "${_version_}" -d "${_dir_}"
)

# Remove the obsolete tempdir.
rm -r "${_build_dir_}"

# Store the installation directory in a variable.
_install_dir_="${_dir_}/bundle/programs/server"

(
# Fixing EACCESS
chmod -R ug=rwX "$HOME"/wekan
chmod -R o= "$HOME"/wekan

# This code block had been used to compile fibers, when fibers provided by WeKan was non-functional.
# Compiling fibers on Uberspace stopped working, the code below is deprecated:
        # cd "${_install_dir_}"
        # "$HOME"/opt/node14.21.3/bin/npm uninstall fibers
        # "$HOME"/opt/node14.21.3/bin/npm install node-gyp node-pre-gyp fibers
        # "$HOME"/opt/node14.21.3/bin/npm audit fix --force
        # npm uninstall fibers
        # npm install node-gyp node-pre-gyp fibers
        # npm audit fix --force

# for now, we copy over a previous compiled version of fibers.
        rm -rf "${_install_dir_}/node_modules/fibers"
        cp -R "$HOME"/wekan/wekan-6.86/bundle/programs/server/node_modules/fibers "${_install_dir_}/node_modules"
)


# Before activating any new version of node, first store the current
# symlink path to ~/wekan/current into a variable.
_former_version_="$(ls -la "$HOME"/wekan/current |cut -d'>' -f2)"


# Now we're safe to point that symlink to the bundle directory of our new version.
ln -sfn "${_dir_}/bundle" "$HOME/wekan/current"



# Success? Let's report ...
tput smso; echo -e "\n We're done--WeKan is up to date.\n\n"; tput rmso

# Ask user to start wekan. If the answer is yes, start wekan. If the answer is no, exit. If the answer is anything else, ask again.
while true; do
    read -p "Do you want to start wekan now? (y/n)" yn
    case $yn in
        [Yy]* ) tmux new -s wekan ~/wekan/start-wekan.sh; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
done

# else
#     # ... if not, roll back to the old node version, undo the symlink
#     # change and restart the service.
#     tput bel; tput smso; tput setaf 1; echo -e "\n Oops, something went wrong--returning now to the former version.\n\n"; tput rmso; tput sgr0
# fi

# Uncomment below in case of shell debugging
# set +x
exit 0
